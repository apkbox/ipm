//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Ipm.DataModel.IpmModel),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsd912cf7e661838aef34e95aa55d45ccfd60708b875b381ff058dcf29e8cd3982))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsd912cf7e661838aef34e95aa55d45ccfd60708b875b381ff058dcf29e8cd3982 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "d912cf7e661838aef34e95aa55d45ccfd60708b875b381ff058dcf29e8cd3982"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "IpmDataModelStoreContainer.Assets")
            {
                return GetView0();
            }

            if (extentName == "IpmDataModelStoreContainer.AssetInstances")
            {
                return GetView1();
            }

            if (extentName == "IpmDataModelStoreContainer.Portfolios")
            {
                return GetView2();
            }

            if (extentName == "IpmDataModelStoreContainer.Accounts")
            {
                return GetView3();
            }

            if (extentName == "IpmDataModelStoreContainer.CashTransactions")
            {
                return GetView4();
            }

            if (extentName == "IpmDataModelStoreContainer.AssetTransactions")
            {
                return GetView5();
            }

            if (extentName == "IpmDataModelStoreContainer.AccountBalanceBooks")
            {
                return GetView6();
            }

            if (extentName == "IpmDataModelStoreContainer.PortfolioBalanceBooks")
            {
                return GetView7();
            }

            if (extentName == "IpmModel.Assets")
            {
                return GetView8();
            }

            if (extentName == "IpmModel.AssetInstances")
            {
                return GetView9();
            }

            if (extentName == "IpmModel.AssetAssetInstance")
            {
                return GetView10();
            }

            if (extentName == "IpmModel.AccountAssetInstance")
            {
                return GetView11();
            }

            if (extentName == "IpmModel.Portfolios")
            {
                return GetView12();
            }

            if (extentName == "IpmModel.Accounts")
            {
                return GetView13();
            }

            if (extentName == "IpmModel.PortfolioAccount")
            {
                return GetView14();
            }

            if (extentName == "IpmModel.CashTransactions")
            {
                return GetView15();
            }

            if (extentName == "IpmModel.AccountCashTransaction")
            {
                return GetView16();
            }

            if (extentName == "IpmModel.AssetTransactionCashTransaction")
            {
                return GetView17();
            }

            if (extentName == "IpmModel.AssetTransactions")
            {
                return GetView18();
            }

            if (extentName == "IpmModel.AccountAssetTransaction")
            {
                return GetView19();
            }

            if (extentName == "IpmModel.AssetInstanceAssetTransaction")
            {
                return GetView20();
            }

            if (extentName == "IpmModel.AccountBalanceBooks")
            {
                return GetView21();
            }

            if (extentName == "IpmModel.AccountAccountBalanceBook")
            {
                return GetView22();
            }

            if (extentName == "IpmModel.PortfolioBalanceBooks")
            {
                return GetView23();
            }

            if (extentName == "IpmModel.PortfolioPortfolioBalanceBook")
            {
                return GetView24();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for IpmDataModelStoreContainer.Assets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Assets
        [IpmDataModel.Store.Assets](T1.Assets_AssetId, T1.Assets_TickerSymbol, T1.Assets_AssetName, T1.Assets_DividendYield, T1.Assets_MER, T1.Assets_LastMarketPrice, T1.Assets_LastQuoteDate)
    FROM (
        SELECT 
            T.AssetId AS Assets_AssetId, 
            T.TickerSymbol AS Assets_TickerSymbol, 
            T.AssetName AS Assets_AssetName, 
            T.DividendYield AS Assets_DividendYield, 
            T.MER AS Assets_MER, 
            T.LastMarketPrice AS Assets_LastMarketPrice, 
            T.LastQuoteDate AS Assets_LastQuoteDate, 
            True AS _from0
        FROM IpmModel.Assets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for IpmDataModelStoreContainer.AssetInstances.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetInstances
        [IpmDataModel.Store.AssetInstances](T4.AssetInstances_AssetInstanceId, T4.AssetInstances_BookCost, T4.AssetInstances_MarketPrice, T4.[AssetInstances.Asset_AssetId], T4.[AssetInstances.Account_AccountId])
    FROM (
        SELECT T1.AssetInstances_AssetInstanceId, T3.AssetInstances_BookCost, T3.AssetInstances_MarketPrice, T2.[AssetInstances.Asset_AssetId], T1.[AssetInstances.Account_AccountId], T3._from0, T2._from1, T1._from2
        FROM  (
            SELECT 
                Key(T.AssetInstance).AssetInstanceId AS AssetInstances_AssetInstanceId, 
                Key(T.Account).AccountId AS [AssetInstances.Account_AccountId], 
                True AS _from2
            FROM IpmModel.AccountAssetInstance AS T) AS T1
            INNER JOIN (
            SELECT 
                Key(T.AssetInstance).AssetInstanceId AS AssetInstances_AssetInstanceId, 
                Key(T.Asset).AssetId AS [AssetInstances.Asset_AssetId], 
                True AS _from1
            FROM IpmModel.AssetAssetInstance AS T) AS T2
            ON T1.AssetInstances_AssetInstanceId = T2.AssetInstances_AssetInstanceId
            INNER JOIN (
            SELECT 
                T.AssetInstanceId AS AssetInstances_AssetInstanceId, 
                T.BookCost AS AssetInstances_BookCost, 
                T.MarketPrice AS AssetInstances_MarketPrice, 
                True AS _from0
            FROM IpmModel.AssetInstances AS T) AS T3
            ON T1.AssetInstances_AssetInstanceId = T3.AssetInstances_AssetInstanceId
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for IpmDataModelStoreContainer.Portfolios.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Portfolios
        [IpmDataModel.Store.Portfolios](T1.Portfolios_PortfolioId, T1.Portfolios_Name)
    FROM (
        SELECT 
            T.PortfolioId AS Portfolios_PortfolioId, 
            T.Name AS Portfolios_Name, 
            True AS _from0
        FROM IpmModel.Portfolios AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for IpmDataModelStoreContainer.Accounts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Accounts
        [IpmDataModel.Store.Accounts](T3.Accounts_AccountId, T3.Accounts_Name, T3.Accounts_Description, T3.Accounts_Currency, T3.[Accounts.Portfolio_PortfolioId])
    FROM (
        SELECT T1.Accounts_AccountId, T2.Accounts_Name, T2.Accounts_Description, T2.Accounts_Currency, T1.[Accounts.Portfolio_PortfolioId], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.Account).AccountId AS Accounts_AccountId, 
                Key(T.Portfolio).PortfolioId AS [Accounts.Portfolio_PortfolioId], 
                True AS _from1
            FROM IpmModel.PortfolioAccount AS T) AS T1
            INNER JOIN (
            SELECT 
                T.AccountId AS Accounts_AccountId, 
                T.Name AS Accounts_Name, 
                T.Description AS Accounts_Description, 
                T.Currency AS Accounts_Currency, 
                True AS _from0
            FROM IpmModel.Accounts AS T) AS T2
            ON T1.Accounts_AccountId = T2.Accounts_AccountId
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for IpmDataModelStoreContainer.CashTransactions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CashTransactions
        [IpmDataModel.Store.CashTransactions](T5.CashTransactions_CashTransactionId, T5.CashTransactions_TransactionDate, T5.CashTransactions_SettlementDate, T5.CashTransactions_Description, T5.CashTransactions_Comment, T5.CashTransactions_Amount, T5.CashTransactions_IsImported, T5.[CashTransactions.Account_AccountId], T5.[CashTransactions.AssetTransaction_AssetTransactionId])
    FROM (
        SELECT T3.CashTransactions_CashTransactionId, T3.CashTransactions_TransactionDate, T3.CashTransactions_SettlementDate, T3.CashTransactions_Description, T3.CashTransactions_Comment, T3.CashTransactions_Amount, T3.CashTransactions_IsImported, T3.[CashTransactions.Account_AccountId], T4.[CashTransactions.AssetTransaction_AssetTransactionId], T3._from0, (T4._from1 AND T4._from1 IS NOT NULL) AS _from1, T3._from2
        FROM  (
            SELECT T1.CashTransactions_CashTransactionId, T2.CashTransactions_TransactionDate, T2.CashTransactions_SettlementDate, T2.CashTransactions_Description, T2.CashTransactions_Comment, T2.CashTransactions_Amount, T2.CashTransactions_IsImported, T1.[CashTransactions.Account_AccountId], T2._from0, T1._from2
            FROM  (
                SELECT 
                    Key(T.CashTransaction).CashTransactionId AS CashTransactions_CashTransactionId, 
                    Key(T.Account).AccountId AS [CashTransactions.Account_AccountId], 
                    True AS _from2
                FROM IpmModel.AccountCashTransaction AS T) AS T1
                INNER JOIN (
                SELECT 
                    T.CashTransactionId AS CashTransactions_CashTransactionId, 
                    T.TransactionDate AS CashTransactions_TransactionDate, 
                    T.SettlementDate AS CashTransactions_SettlementDate, 
                    T.Description AS CashTransactions_Description, 
                    T.Comment AS CashTransactions_Comment, 
                    T.Amount AS CashTransactions_Amount, 
                    T.IsImported AS CashTransactions_IsImported, 
                    True AS _from0
                FROM IpmModel.CashTransactions AS T) AS T2
                ON T1.CashTransactions_CashTransactionId = T2.CashTransactions_CashTransactionId) AS T3
            LEFT OUTER JOIN (
            SELECT 
                Key(T.CashTransaction).CashTransactionId AS CashTransactions_CashTransactionId, 
                Key(T.AssetTransaction).AssetTransactionId AS [CashTransactions.AssetTransaction_AssetTransactionId], 
                True AS _from1
            FROM IpmModel.AssetTransactionCashTransaction AS T) AS T4
            ON T3.CashTransactions_CashTransactionId = T4.CashTransactions_CashTransactionId
    ) AS T5");
        }

        /// <summary>
        /// Gets the view for IpmDataModelStoreContainer.AssetTransactions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetTransactions
        [IpmDataModel.Store.AssetTransactions](T5.AssetTransactions_AssetTransactionId, T5.AssetTransactions_TransactionType, T5.AssetTransactions_TransactionDate, T5.AssetTransactions_SettlementDate, T5.AssetTransactions_TickerSymbol, T5.AssetTransactions_AssetName, T5.AssetTransactions_Description, T5.AssetTransactions_Comment, T5.AssetTransactions_Price, T5.AssetTransactions_Quantity, T5.AssetTransactions_Commission, T5.AssetTransactions_Amount, T5.AssetTransactions_IsImported, T5.[AssetTransactions.Account_AccountId], T5.[AssetTransactions.AssetInstance_AssetInstanceId])
    FROM (
        SELECT T3.AssetTransactions_AssetTransactionId, T3.AssetTransactions_TransactionType, T3.AssetTransactions_TransactionDate, T3.AssetTransactions_SettlementDate, T3.AssetTransactions_TickerSymbol, T3.AssetTransactions_AssetName, T3.AssetTransactions_Description, T3.AssetTransactions_Comment, T3.AssetTransactions_Price, T3.AssetTransactions_Quantity, T3.AssetTransactions_Commission, T3.AssetTransactions_Amount, T3.AssetTransactions_IsImported, T3.[AssetTransactions.Account_AccountId], T4.[AssetTransactions.AssetInstance_AssetInstanceId], T3._from0, T3._from1, (T4._from2 AND T4._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT T1.AssetTransactions_AssetTransactionId, T1.AssetTransactions_TransactionType, T1.AssetTransactions_TransactionDate, T1.AssetTransactions_SettlementDate, T1.AssetTransactions_TickerSymbol, T1.AssetTransactions_AssetName, T1.AssetTransactions_Description, T1.AssetTransactions_Comment, T1.AssetTransactions_Price, T1.AssetTransactions_Quantity, T1.AssetTransactions_Commission, T1.AssetTransactions_Amount, T1.AssetTransactions_IsImported, T2.[AssetTransactions.Account_AccountId], T1._from0, T2._from1
            FROM  (
                SELECT 
                    T.AssetTransactionId AS AssetTransactions_AssetTransactionId, 
                    CAST(T.TransactionType AS [Edm.Int32]) AS AssetTransactions_TransactionType, 
                    T.TransactionDate AS AssetTransactions_TransactionDate, 
                    T.SettlementDate AS AssetTransactions_SettlementDate, 
                    T.TickerSymbol AS AssetTransactions_TickerSymbol, 
                    T.AssetName AS AssetTransactions_AssetName, 
                    T.Description AS AssetTransactions_Description, 
                    T.Comment AS AssetTransactions_Comment, 
                    T.Price AS AssetTransactions_Price, 
                    T.Quantity AS AssetTransactions_Quantity, 
                    T.Commission AS AssetTransactions_Commission, 
                    T.Amount AS AssetTransactions_Amount, 
                    T.IsImported AS AssetTransactions_IsImported, 
                    True AS _from0
                FROM IpmModel.AssetTransactions AS T) AS T1
                INNER JOIN (
                SELECT 
                    Key(T.AssetTransaction).AssetTransactionId AS AssetTransactions_AssetTransactionId, 
                    Key(T.Account).AccountId AS [AssetTransactions.Account_AccountId], 
                    True AS _from1
                FROM IpmModel.AccountAssetTransaction AS T) AS T2
                ON T1.AssetTransactions_AssetTransactionId = T2.AssetTransactions_AssetTransactionId) AS T3
            LEFT OUTER JOIN (
            SELECT 
                Key(T.AssetTransaction).AssetTransactionId AS AssetTransactions_AssetTransactionId, 
                Key(T.AssetInstance).AssetInstanceId AS [AssetTransactions.AssetInstance_AssetInstanceId], 
                True AS _from2
            FROM IpmModel.AssetInstanceAssetTransaction AS T) AS T4
            ON T3.AssetTransactions_AssetTransactionId = T4.AssetTransactions_AssetTransactionId
    ) AS T5");
        }

        /// <summary>
        /// Gets the view for IpmDataModelStoreContainer.AccountBalanceBooks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AccountBalanceBooks
        [IpmDataModel.Store.AccountBalanceBooks](T3.AccountBalanceBooks_Id, T3.[AccountBalanceBooks.BalanceBase_CashBalance], T3.[AccountBalanceBooks.BalanceBase_BalanceDate], T3.[AccountBalanceBooks.BalanceBase_AssetsBookCost], T3.[AccountBalanceBooks.BalanceBase_AssetsMarketCost], T3.[AccountBalanceBooks.BalanceBase_Yield], T3.[AccountBalanceBooks.BalanceBase_YieldPercent], T3.[AccountBalanceBooks.BalanceBase_Return], T3.[AccountBalanceBooks.BalanceBase_ReturnPercent], T3.[AccountBalanceBooks.Account_AccountId])
    FROM (
        SELECT T1.AccountBalanceBooks_Id, T2.[AccountBalanceBooks.BalanceBase_CashBalance], T2.[AccountBalanceBooks.BalanceBase_BalanceDate], T2.[AccountBalanceBooks.BalanceBase_AssetsBookCost], T2.[AccountBalanceBooks.BalanceBase_AssetsMarketCost], T2.[AccountBalanceBooks.BalanceBase_Yield], T2.[AccountBalanceBooks.BalanceBase_YieldPercent], T2.[AccountBalanceBooks.BalanceBase_Return], T2.[AccountBalanceBooks.BalanceBase_ReturnPercent], T1.[AccountBalanceBooks.Account_AccountId], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.AccountBalanceBook).Id AS AccountBalanceBooks_Id, 
                Key(T.Account).AccountId AS [AccountBalanceBooks.Account_AccountId], 
                True AS _from1
            FROM IpmModel.AccountAccountBalanceBook AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS AccountBalanceBooks_Id, 
                T.BalanceBase.CashBalance AS [AccountBalanceBooks.BalanceBase_CashBalance], 
                T.BalanceBase.BalanceDate AS [AccountBalanceBooks.BalanceBase_BalanceDate], 
                T.BalanceBase.AssetsBookCost AS [AccountBalanceBooks.BalanceBase_AssetsBookCost], 
                T.BalanceBase.AssetsMarketCost AS [AccountBalanceBooks.BalanceBase_AssetsMarketCost], 
                T.BalanceBase.Yield AS [AccountBalanceBooks.BalanceBase_Yield], 
                T.BalanceBase.YieldPercent AS [AccountBalanceBooks.BalanceBase_YieldPercent], 
                T.BalanceBase.Return AS [AccountBalanceBooks.BalanceBase_Return], 
                T.BalanceBase.ReturnPercent AS [AccountBalanceBooks.BalanceBase_ReturnPercent], 
                True AS _from0
            FROM IpmModel.AccountBalanceBooks AS T) AS T2
            ON T1.AccountBalanceBooks_Id = T2.AccountBalanceBooks_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for IpmDataModelStoreContainer.PortfolioBalanceBooks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PortfolioBalanceBooks
        [IpmDataModel.Store.PortfolioBalanceBooks](T3.PortfolioBalanceBooks_Id, T3.[PortfolioBalanceBooks.BalanceBase_CashBalance], T3.[PortfolioBalanceBooks.BalanceBase_BalanceDate], T3.[PortfolioBalanceBooks.BalanceBase_AssetsBookCost], T3.[PortfolioBalanceBooks.BalanceBase_AssetsMarketCost], T3.[PortfolioBalanceBooks.BalanceBase_Yield], T3.[PortfolioBalanceBooks.BalanceBase_YieldPercent], T3.[PortfolioBalanceBooks.BalanceBase_Return], T3.[PortfolioBalanceBooks.BalanceBase_ReturnPercent], T3.[PortfolioBalanceBooks.Portfolio_PortfolioId])
    FROM (
        SELECT T1.PortfolioBalanceBooks_Id, T2.[PortfolioBalanceBooks.BalanceBase_CashBalance], T2.[PortfolioBalanceBooks.BalanceBase_BalanceDate], T2.[PortfolioBalanceBooks.BalanceBase_AssetsBookCost], T2.[PortfolioBalanceBooks.BalanceBase_AssetsMarketCost], T2.[PortfolioBalanceBooks.BalanceBase_Yield], T2.[PortfolioBalanceBooks.BalanceBase_YieldPercent], T2.[PortfolioBalanceBooks.BalanceBase_Return], T2.[PortfolioBalanceBooks.BalanceBase_ReturnPercent], T1.[PortfolioBalanceBooks.Portfolio_PortfolioId], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.PortfolioBalanceBook).Id AS PortfolioBalanceBooks_Id, 
                Key(T.Portfolio).PortfolioId AS [PortfolioBalanceBooks.Portfolio_PortfolioId], 
                True AS _from1
            FROM IpmModel.PortfolioPortfolioBalanceBook AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS PortfolioBalanceBooks_Id, 
                T.BalanceBase.CashBalance AS [PortfolioBalanceBooks.BalanceBase_CashBalance], 
                T.BalanceBase.BalanceDate AS [PortfolioBalanceBooks.BalanceBase_BalanceDate], 
                T.BalanceBase.AssetsBookCost AS [PortfolioBalanceBooks.BalanceBase_AssetsBookCost], 
                T.BalanceBase.AssetsMarketCost AS [PortfolioBalanceBooks.BalanceBase_AssetsMarketCost], 
                T.BalanceBase.Yield AS [PortfolioBalanceBooks.BalanceBase_Yield], 
                T.BalanceBase.YieldPercent AS [PortfolioBalanceBooks.BalanceBase_YieldPercent], 
                T.BalanceBase.Return AS [PortfolioBalanceBooks.BalanceBase_Return], 
                T.BalanceBase.ReturnPercent AS [PortfolioBalanceBooks.BalanceBase_ReturnPercent], 
                True AS _from0
            FROM IpmModel.PortfolioBalanceBooks AS T) AS T2
            ON T1.PortfolioBalanceBooks_Id = T2.PortfolioBalanceBooks_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for IpmModel.Assets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Assets
        [IpmDataModel.Asset](T1.Asset_AssetId, T1.Asset_TickerSymbol, T1.Asset_AssetName, T1.Asset_DividendYield, T1.Asset_MER, T1.Asset_LastMarketPrice, T1.Asset_LastQuoteDate)
    FROM (
        SELECT 
            T.AssetId AS Asset_AssetId, 
            T.TickerSymbol AS Asset_TickerSymbol, 
            T.AssetName AS Asset_AssetName, 
            T.DividendYield AS Asset_DividendYield, 
            T.MER AS Asset_MER, 
            T.LastMarketPrice AS Asset_LastMarketPrice, 
            T.LastQuoteDate AS Asset_LastQuoteDate, 
            True AS _from0
        FROM IpmDataModelStoreContainer.Assets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for IpmModel.AssetInstances.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetInstances
        [IpmDataModel.AssetInstance](T1.AssetInstance_AssetInstanceId, T1.AssetInstance_BookCost, T1.AssetInstance_MarketPrice) WITH 
        RELATIONSHIP(CREATEREF(IpmModel.Assets, ROW(T1.AssetAssetInstance_Asset_AssetId),[IpmDataModel.Asset]),[IpmDataModel.AssetAssetInstance],AssetInstance,Asset) 
        RELATIONSHIP(CREATEREF(IpmModel.Accounts, ROW(T1.AccountAssetInstance_Account_AccountId),[IpmDataModel.Account]),[IpmDataModel.AccountAssetInstance],AssetInstance,Account) 
    FROM (
        SELECT 
            T.AssetInstanceId AS AssetInstance_AssetInstanceId, 
            T.BookCost AS AssetInstance_BookCost, 
            T.MarketPrice AS AssetInstance_MarketPrice, 
            True AS _from0, 
            T.Asset_AssetId AS AssetAssetInstance_Asset_AssetId, 
            T.Account_AccountId AS AccountAssetInstance_Account_AccountId
        FROM IpmDataModelStoreContainer.AssetInstances AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for IpmModel.AssetAssetInstance.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetAssetInstance
        [IpmDataModel.AssetAssetInstance](T3.AssetAssetInstance_Asset, T3.AssetAssetInstance_AssetInstance)
    FROM (
        SELECT -- Constructing Asset
            CreateRef(IpmModel.Assets, row(T2.AssetAssetInstance_Asset_AssetId), [IpmDataModel.Asset]) AS AssetAssetInstance_Asset, 
            T2.AssetAssetInstance_AssetInstance
        FROM (
            SELECT -- Constructing AssetInstance
                T1.AssetAssetInstance_Asset_AssetId, 
                CreateRef(IpmModel.AssetInstances, row(T1.AssetAssetInstance_AssetInstance_AssetInstanceId), [IpmDataModel.AssetInstance]) AS AssetAssetInstance_AssetInstance
            FROM (
                SELECT 
                    T.Asset_AssetId AS AssetAssetInstance_Asset_AssetId, 
                    T.AssetInstanceId AS AssetAssetInstance_AssetInstance_AssetInstanceId, 
                    True AS _from0
                FROM IpmDataModelStoreContainer.AssetInstances AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for IpmModel.AccountAssetInstance.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AccountAssetInstance
        [IpmDataModel.AccountAssetInstance](T3.AccountAssetInstance_Account, T3.AccountAssetInstance_AssetInstance)
    FROM (
        SELECT -- Constructing Account
            CreateRef(IpmModel.Accounts, row(T2.AccountAssetInstance_Account_AccountId), [IpmDataModel.Account]) AS AccountAssetInstance_Account, 
            T2.AccountAssetInstance_AssetInstance
        FROM (
            SELECT -- Constructing AssetInstance
                T1.AccountAssetInstance_Account_AccountId, 
                CreateRef(IpmModel.AssetInstances, row(T1.AccountAssetInstance_AssetInstance_AssetInstanceId), [IpmDataModel.AssetInstance]) AS AccountAssetInstance_AssetInstance
            FROM (
                SELECT 
                    T.Account_AccountId AS AccountAssetInstance_Account_AccountId, 
                    T.AssetInstanceId AS AccountAssetInstance_AssetInstance_AssetInstanceId, 
                    True AS _from0
                FROM IpmDataModelStoreContainer.AssetInstances AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for IpmModel.Portfolios.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Portfolios
        [IpmDataModel.Portfolio](T1.Portfolio_PortfolioId, T1.Portfolio_Name)
    FROM (
        SELECT 
            T.PortfolioId AS Portfolio_PortfolioId, 
            T.Name AS Portfolio_Name, 
            True AS _from0
        FROM IpmDataModelStoreContainer.Portfolios AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for IpmModel.Accounts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Accounts
        [IpmDataModel.Account](T1.Account_AccountId, T1.Account_Name, T1.Account_Description, T1.Account_Currency) WITH 
        RELATIONSHIP(CREATEREF(IpmModel.Portfolios, ROW(T1.PortfolioAccount_Portfolio_PortfolioId),[IpmDataModel.Portfolio]),[IpmDataModel.PortfolioAccount],Account,Portfolio) 
    FROM (
        SELECT 
            T.AccountId AS Account_AccountId, 
            T.Name AS Account_Name, 
            T.Description AS Account_Description, 
            T.Currency AS Account_Currency, 
            True AS _from0, 
            T.Portfolio_PortfolioId AS PortfolioAccount_Portfolio_PortfolioId
        FROM IpmDataModelStoreContainer.Accounts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for IpmModel.PortfolioAccount.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PortfolioAccount
        [IpmDataModel.PortfolioAccount](T3.PortfolioAccount_Portfolio, T3.PortfolioAccount_Account)
    FROM (
        SELECT -- Constructing Portfolio
            CreateRef(IpmModel.Portfolios, row(T2.PortfolioAccount_Portfolio_PortfolioId), [IpmDataModel.Portfolio]) AS PortfolioAccount_Portfolio, 
            T2.PortfolioAccount_Account
        FROM (
            SELECT -- Constructing Account
                T1.PortfolioAccount_Portfolio_PortfolioId, 
                CreateRef(IpmModel.Accounts, row(T1.PortfolioAccount_Account_AccountId), [IpmDataModel.Account]) AS PortfolioAccount_Account
            FROM (
                SELECT 
                    T.Portfolio_PortfolioId AS PortfolioAccount_Portfolio_PortfolioId, 
                    T.AccountId AS PortfolioAccount_Account_AccountId, 
                    True AS _from0
                FROM IpmDataModelStoreContainer.Accounts AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for IpmModel.CashTransactions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CashTransactions
        [IpmDataModel.CashTransaction](T1.CashTransaction_CashTransactionId, T1.CashTransaction_TransactionDate, T1.CashTransaction_SettlementDate, T1.CashTransaction_Description, T1.CashTransaction_Comment, T1.CashTransaction_Amount, T1.CashTransaction_IsImported) WITH 
        RELATIONSHIP(CREATEREF(IpmModel.Accounts, ROW(T1.AccountCashTransaction_Account_AccountId),[IpmDataModel.Account]),[IpmDataModel.AccountCashTransaction],CashTransaction,Account) 
        RELATIONSHIP(CREATEREF(IpmModel.AssetTransactions, ROW(T1.AssetTransactionCashTransaction_AssetTransaction_AssetTransactionId),[IpmDataModel.AssetTransaction]),[IpmDataModel.AssetTransactionCashTransaction],CashTransaction,AssetTransaction) 
    FROM (
        SELECT 
            T.CashTransactionId AS CashTransaction_CashTransactionId, 
            T.TransactionDate AS CashTransaction_TransactionDate, 
            T.SettlementDate AS CashTransaction_SettlementDate, 
            T.Description AS CashTransaction_Description, 
            T.Comment AS CashTransaction_Comment, 
            T.Amount AS CashTransaction_Amount, 
            T.IsImported AS CashTransaction_IsImported, 
            True AS _from0, 
            T.Account_AccountId AS AccountCashTransaction_Account_AccountId, 
            T.AssetTransaction_AssetTransactionId AS AssetTransactionCashTransaction_AssetTransaction_AssetTransactionId
        FROM IpmDataModelStoreContainer.CashTransactions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for IpmModel.AccountCashTransaction.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AccountCashTransaction
        [IpmDataModel.AccountCashTransaction](T3.AccountCashTransaction_Account, T3.AccountCashTransaction_CashTransaction)
    FROM (
        SELECT -- Constructing Account
            CreateRef(IpmModel.Accounts, row(T2.AccountCashTransaction_Account_AccountId), [IpmDataModel.Account]) AS AccountCashTransaction_Account, 
            T2.AccountCashTransaction_CashTransaction
        FROM (
            SELECT -- Constructing CashTransaction
                T1.AccountCashTransaction_Account_AccountId, 
                CreateRef(IpmModel.CashTransactions, row(T1.AccountCashTransaction_CashTransaction_CashTransactionId), [IpmDataModel.CashTransaction]) AS AccountCashTransaction_CashTransaction
            FROM (
                SELECT 
                    T.Account_AccountId AS AccountCashTransaction_Account_AccountId, 
                    T.CashTransactionId AS AccountCashTransaction_CashTransaction_CashTransactionId, 
                    True AS _from0
                FROM IpmDataModelStoreContainer.CashTransactions AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for IpmModel.AssetTransactionCashTransaction.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetTransactionCashTransaction
        [IpmDataModel.AssetTransactionCashTransaction](T3.AssetTransactionCashTransaction_AssetTransaction, T3.AssetTransactionCashTransaction_CashTransaction)
    FROM (
        SELECT -- Constructing AssetTransaction
            CreateRef(IpmModel.AssetTransactions, row(T2.AssetTransactionCashTransaction_AssetTransaction_AssetTransactionId), [IpmDataModel.AssetTransaction]) AS AssetTransactionCashTransaction_AssetTransaction, 
            T2.AssetTransactionCashTransaction_CashTransaction
        FROM (
            SELECT -- Constructing CashTransaction
                T1.AssetTransactionCashTransaction_AssetTransaction_AssetTransactionId, 
                CreateRef(IpmModel.CashTransactions, row(T1.AssetTransactionCashTransaction_CashTransaction_CashTransactionId), [IpmDataModel.CashTransaction]) AS AssetTransactionCashTransaction_CashTransaction
            FROM (
                SELECT 
                    T.AssetTransaction_AssetTransactionId AS AssetTransactionCashTransaction_AssetTransaction_AssetTransactionId, 
                    T.CashTransactionId AS AssetTransactionCashTransaction_CashTransaction_CashTransactionId, 
                    True AS _from0
                FROM IpmDataModelStoreContainer.CashTransactions AS T
                WHERE T.AssetTransaction_AssetTransactionId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for IpmModel.AssetTransactions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetTransactions
        [IpmDataModel.AssetTransaction](T1.AssetTransaction_AssetTransactionId, T1.AssetTransaction_TransactionType, T1.AssetTransaction_TransactionDate, T1.AssetTransaction_SettlementDate, T1.AssetTransaction_TickerSymbol, T1.AssetTransaction_AssetName, T1.AssetTransaction_Description, T1.AssetTransaction_Comment, T1.AssetTransaction_Price, T1.AssetTransaction_Quantity, T1.AssetTransaction_Commission, T1.AssetTransaction_Amount, T1.AssetTransaction_IsImported) WITH 
        RELATIONSHIP(CREATEREF(IpmModel.Accounts, ROW(T1.AccountAssetTransaction_Account_AccountId),[IpmDataModel.Account]),[IpmDataModel.AccountAssetTransaction],AssetTransaction,Account) 
        RELATIONSHIP(CREATEREF(IpmModel.AssetInstances, ROW(T1.AssetInstanceAssetTransaction_AssetInstance_AssetInstanceId),[IpmDataModel.AssetInstance]),[IpmDataModel.AssetInstanceAssetTransaction],AssetTransaction,AssetInstance) 
    FROM (
        SELECT 
            T.AssetTransactionId AS AssetTransaction_AssetTransactionId, 
            CAST(T.TransactionType AS [IpmDataModel.TransactionType]) AS AssetTransaction_TransactionType, 
            T.TransactionDate AS AssetTransaction_TransactionDate, 
            T.SettlementDate AS AssetTransaction_SettlementDate, 
            T.TickerSymbol AS AssetTransaction_TickerSymbol, 
            T.AssetName AS AssetTransaction_AssetName, 
            T.Description AS AssetTransaction_Description, 
            T.Comment AS AssetTransaction_Comment, 
            T.Price AS AssetTransaction_Price, 
            T.Quantity AS AssetTransaction_Quantity, 
            T.Commission AS AssetTransaction_Commission, 
            T.Amount AS AssetTransaction_Amount, 
            T.IsImported AS AssetTransaction_IsImported, 
            True AS _from0, 
            T.Account_AccountId AS AccountAssetTransaction_Account_AccountId, 
            T.AssetInstance_AssetInstanceId AS AssetInstanceAssetTransaction_AssetInstance_AssetInstanceId
        FROM IpmDataModelStoreContainer.AssetTransactions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for IpmModel.AccountAssetTransaction.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AccountAssetTransaction
        [IpmDataModel.AccountAssetTransaction](T3.AccountAssetTransaction_Account, T3.AccountAssetTransaction_AssetTransaction)
    FROM (
        SELECT -- Constructing Account
            CreateRef(IpmModel.Accounts, row(T2.AccountAssetTransaction_Account_AccountId), [IpmDataModel.Account]) AS AccountAssetTransaction_Account, 
            T2.AccountAssetTransaction_AssetTransaction
        FROM (
            SELECT -- Constructing AssetTransaction
                T1.AccountAssetTransaction_Account_AccountId, 
                CreateRef(IpmModel.AssetTransactions, row(T1.AccountAssetTransaction_AssetTransaction_AssetTransactionId), [IpmDataModel.AssetTransaction]) AS AccountAssetTransaction_AssetTransaction
            FROM (
                SELECT 
                    T.Account_AccountId AS AccountAssetTransaction_Account_AccountId, 
                    T.AssetTransactionId AS AccountAssetTransaction_AssetTransaction_AssetTransactionId, 
                    True AS _from0
                FROM IpmDataModelStoreContainer.AssetTransactions AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for IpmModel.AssetInstanceAssetTransaction.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetInstanceAssetTransaction
        [IpmDataModel.AssetInstanceAssetTransaction](T3.AssetInstanceAssetTransaction_AssetInstance, T3.AssetInstanceAssetTransaction_AssetTransaction)
    FROM (
        SELECT -- Constructing AssetInstance
            CreateRef(IpmModel.AssetInstances, row(T2.AssetInstanceAssetTransaction_AssetInstance_AssetInstanceId), [IpmDataModel.AssetInstance]) AS AssetInstanceAssetTransaction_AssetInstance, 
            T2.AssetInstanceAssetTransaction_AssetTransaction
        FROM (
            SELECT -- Constructing AssetTransaction
                T1.AssetInstanceAssetTransaction_AssetInstance_AssetInstanceId, 
                CreateRef(IpmModel.AssetTransactions, row(T1.AssetInstanceAssetTransaction_AssetTransaction_AssetTransactionId), [IpmDataModel.AssetTransaction]) AS AssetInstanceAssetTransaction_AssetTransaction
            FROM (
                SELECT 
                    T.AssetInstance_AssetInstanceId AS AssetInstanceAssetTransaction_AssetInstance_AssetInstanceId, 
                    T.AssetTransactionId AS AssetInstanceAssetTransaction_AssetTransaction_AssetTransactionId, 
                    True AS _from0
                FROM IpmDataModelStoreContainer.AssetTransactions AS T
                WHERE T.AssetInstance_AssetInstanceId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for IpmModel.AccountBalanceBooks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AccountBalanceBooks
        [IpmDataModel.AccountBalanceBook](T2.AccountBalanceBook_Id, T2.AccountBalanceBook_BalanceBase) WITH 
        RELATIONSHIP(CREATEREF(IpmModel.Accounts, ROW(T2.AccountAccountBalanceBook_Account_AccountId),[IpmDataModel.Account]),[IpmDataModel.AccountAccountBalanceBook],AccountBalanceBook,Account) 
    FROM (
        SELECT -- Constructing BalanceBase
            T1.AccountBalanceBook_Id, 
            [IpmDataModel.BalanceBase](T1.AccountBalanceBook_BalanceBase_CashBalance, T1.AccountBalanceBook_BalanceBase_BalanceDate, T1.AccountBalanceBook_BalanceBase_AssetsBookCost, T1.AccountBalanceBook_BalanceBase_AssetsMarketCost, T1.AccountBalanceBook_BalanceBase_Yield, T1.AccountBalanceBook_BalanceBase_YieldPercent, T1.AccountBalanceBook_BalanceBase_Return, T1.AccountBalanceBook_BalanceBase_ReturnPercent) AS AccountBalanceBook_BalanceBase, 
            T1.AccountAccountBalanceBook_Account_AccountId
        FROM (
            SELECT 
                T.Id AS AccountBalanceBook_Id, 
                T.BalanceBase_CashBalance AS AccountBalanceBook_BalanceBase_CashBalance, 
                T.BalanceBase_BalanceDate AS AccountBalanceBook_BalanceBase_BalanceDate, 
                T.BalanceBase_AssetsBookCost AS AccountBalanceBook_BalanceBase_AssetsBookCost, 
                T.BalanceBase_AssetsMarketCost AS AccountBalanceBook_BalanceBase_AssetsMarketCost, 
                T.BalanceBase_Yield AS AccountBalanceBook_BalanceBase_Yield, 
                T.BalanceBase_YieldPercent AS AccountBalanceBook_BalanceBase_YieldPercent, 
                T.BalanceBase_Return AS AccountBalanceBook_BalanceBase_Return, 
                T.BalanceBase_ReturnPercent AS AccountBalanceBook_BalanceBase_ReturnPercent, 
                True AS _from0, 
                T.Account_AccountId AS AccountAccountBalanceBook_Account_AccountId
            FROM IpmDataModelStoreContainer.AccountBalanceBooks AS T
        ) AS T1
    ) AS T2");
        }

        /// <summary>
        /// Gets the view for IpmModel.AccountAccountBalanceBook.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AccountAccountBalanceBook
        [IpmDataModel.AccountAccountBalanceBook](T3.AccountAccountBalanceBook_Account, T3.AccountAccountBalanceBook_AccountBalanceBook)
    FROM (
        SELECT -- Constructing Account
            CreateRef(IpmModel.Accounts, row(T2.AccountAccountBalanceBook_Account_AccountId), [IpmDataModel.Account]) AS AccountAccountBalanceBook_Account, 
            T2.AccountAccountBalanceBook_AccountBalanceBook
        FROM (
            SELECT -- Constructing AccountBalanceBook
                T1.AccountAccountBalanceBook_Account_AccountId, 
                CreateRef(IpmModel.AccountBalanceBooks, row(T1.AccountAccountBalanceBook_AccountBalanceBook_Id), [IpmDataModel.AccountBalanceBook]) AS AccountAccountBalanceBook_AccountBalanceBook
            FROM (
                SELECT 
                    T.Account_AccountId AS AccountAccountBalanceBook_Account_AccountId, 
                    T.Id AS AccountAccountBalanceBook_AccountBalanceBook_Id, 
                    True AS _from0
                FROM IpmDataModelStoreContainer.AccountBalanceBooks AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for IpmModel.PortfolioBalanceBooks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PortfolioBalanceBooks
        [IpmDataModel.PortfolioBalanceBook](T2.PortfolioBalanceBook_Id, T2.PortfolioBalanceBook_BalanceBase) WITH 
        RELATIONSHIP(CREATEREF(IpmModel.Portfolios, ROW(T2.PortfolioPortfolioBalanceBook_Portfolio_PortfolioId),[IpmDataModel.Portfolio]),[IpmDataModel.PortfolioPortfolioBalanceBook],PortfolioBalanceBook,Portfolio) 
    FROM (
        SELECT -- Constructing BalanceBase
            T1.PortfolioBalanceBook_Id, 
            [IpmDataModel.BalanceBase](T1.PortfolioBalanceBook_BalanceBase_CashBalance, T1.PortfolioBalanceBook_BalanceBase_BalanceDate, T1.PortfolioBalanceBook_BalanceBase_AssetsBookCost, T1.PortfolioBalanceBook_BalanceBase_AssetsMarketCost, T1.PortfolioBalanceBook_BalanceBase_Yield, T1.PortfolioBalanceBook_BalanceBase_YieldPercent, T1.PortfolioBalanceBook_BalanceBase_Return, T1.PortfolioBalanceBook_BalanceBase_ReturnPercent) AS PortfolioBalanceBook_BalanceBase, 
            T1.PortfolioPortfolioBalanceBook_Portfolio_PortfolioId
        FROM (
            SELECT 
                T.Id AS PortfolioBalanceBook_Id, 
                T.BalanceBase_CashBalance AS PortfolioBalanceBook_BalanceBase_CashBalance, 
                T.BalanceBase_BalanceDate AS PortfolioBalanceBook_BalanceBase_BalanceDate, 
                T.BalanceBase_AssetsBookCost AS PortfolioBalanceBook_BalanceBase_AssetsBookCost, 
                T.BalanceBase_AssetsMarketCost AS PortfolioBalanceBook_BalanceBase_AssetsMarketCost, 
                T.BalanceBase_Yield AS PortfolioBalanceBook_BalanceBase_Yield, 
                T.BalanceBase_YieldPercent AS PortfolioBalanceBook_BalanceBase_YieldPercent, 
                T.BalanceBase_Return AS PortfolioBalanceBook_BalanceBase_Return, 
                T.BalanceBase_ReturnPercent AS PortfolioBalanceBook_BalanceBase_ReturnPercent, 
                True AS _from0, 
                T.Portfolio_PortfolioId AS PortfolioPortfolioBalanceBook_Portfolio_PortfolioId
            FROM IpmDataModelStoreContainer.PortfolioBalanceBooks AS T
        ) AS T1
    ) AS T2");
        }

        /// <summary>
        /// Gets the view for IpmModel.PortfolioPortfolioBalanceBook.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PortfolioPortfolioBalanceBook
        [IpmDataModel.PortfolioPortfolioBalanceBook](T3.PortfolioPortfolioBalanceBook_Portfolio, T3.PortfolioPortfolioBalanceBook_PortfolioBalanceBook)
    FROM (
        SELECT -- Constructing Portfolio
            CreateRef(IpmModel.Portfolios, row(T2.PortfolioPortfolioBalanceBook_Portfolio_PortfolioId), [IpmDataModel.Portfolio]) AS PortfolioPortfolioBalanceBook_Portfolio, 
            T2.PortfolioPortfolioBalanceBook_PortfolioBalanceBook
        FROM (
            SELECT -- Constructing PortfolioBalanceBook
                T1.PortfolioPortfolioBalanceBook_Portfolio_PortfolioId, 
                CreateRef(IpmModel.PortfolioBalanceBooks, row(T1.PortfolioPortfolioBalanceBook_PortfolioBalanceBook_Id), [IpmDataModel.PortfolioBalanceBook]) AS PortfolioPortfolioBalanceBook_PortfolioBalanceBook
            FROM (
                SELECT 
                    T.Portfolio_PortfolioId AS PortfolioPortfolioBalanceBook_Portfolio_PortfolioId, 
                    T.Id AS PortfolioPortfolioBalanceBook_PortfolioBalanceBook_Id, 
                    True AS _from0
                FROM IpmDataModelStoreContainer.PortfolioBalanceBooks AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
